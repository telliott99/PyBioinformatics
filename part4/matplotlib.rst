.. _matplotlib:

##########
Matplotlib
##########

**Installation**

Although it's possible to use Python productively for many tasks without finding a way to plot figures, installing a plotting library will change your life.  The one I use is ``matplotlib``

http://matplotlib.sourceforge.net/

Installing ``matplotlib`` can be a challenge at first, because there are required libraries (prerequisites or dependencies) that must be installed first in order for ``matplotlib`` to work.  In fact, it won't even install, but give an error.

It's fairly simple on Linux, we just use ``apt-get`` repeatedly::

    sudo apt-get update
    sudo apt-get install python-dev
    sudo apt-get install libblas3gf
    sudo apt-get install liblapack3gf
    sudo apt-get install python-numpy
    sudo apt-get install zlib-bin
    sudo apt-get install libpng3
    sudo apt-get install libfreetype6
    sudo apt-get install python-matplotlib
    
If the ``sudo`` business is new to you, see the section :ref:`unix`.  But first, check out xkcd

http://xkcd.com/149/

A description of my experience on Linux is: 

http://telliott99.blogspot.com/2011/08/trying-ubuntu-linux-2.html

On OS X, the problem is that all the libraries are present, but we need to make it possible for ``matplotlib`` to find them.  The best solution I've found is to install ``pkgconfig``.  I used Homebrew

http://mxcl.github.com/homebrew

A thorough description of my approach on OS X is

http://telliott99.blogspot.com/2011/07/matplotlib-on-os-x-lion-revised.html

There are binary installers for Windows.  I haven't used them, but there are many (many) Windows people using ``matplotlib`` so I'm confident they work fine.

>>> import numpy as np
>>> np.__version__
'1.5.0'
>>> import matplotlib
>>> matplotlib.__version__
'0.99.1.1'
>>>

We are good to go.

I have an amateurish understanding of ``matplotlib``, and to compensate for that my usage is stereotypical.  I implement the code to make a 'plot', then save the result to the Desktop as a 'png' or 'pdf' file.  I haven't yet invested the time to figure out other approaches.

.. sourcecode:: python

    import matplotlib.pyplot as plt

    X = range(5)
    Y = [x**2 for x in X]
    plt.plot(X,Y,lw=2,
        color='k',
        zorder=1)
    plt.scatter(X,Y,s=250,
        marker = 'o',
        color='r',
        zorder=2)

    plt.savefig('plot1.png')
    
In this first example, we construct some simple data and then call two functions, ``plot`` and ``scatter``.  The color black is abbreviated 'k'.  I use the zorder directive to plot the dots on top of the lines, otherwise ``plot`` will dominate even though it was called first.  ``s`` is the size of the plot symbol.

Details for ``plot`` are 

http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.plot

for the ``lw`` line width property of the lines generated by ``plot`` 

http://matplotlib.sourceforge.net/users/pyplot_tutorial.html#controlling-line-properties

and for ``scatter`` 

http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.scatter

.. image:: /figures/plot1.png
   :scale: 50 %
   
**Distributions**

Here is a second example that's a bit more sophisticated.

.. sourcecode:: python

    import math
    import numpy as np
    import matplotlib.pyplot as plt

    def normal(mu,sigma):
        def f(x):
            z = 1.0*(x-mu)/sigma
            e = math.e**(-0.5*z**2)
            C = math.sqrt(2*math.pi)*sigma
            return 1.0*e/C
        return f

    X = 2
    dx = 0.1
    R = np.arange(-X,X+dx,dx)

    L = list()
    sdL = (0.25,0.5,1,2)
    for sd in sdL:
        f = normal(mu=0,sigma=sd)
        L.append([f(x) for x in R])
    colors = ['magenta','r','b','purple']

    for c,P in zip(colors,L):
        plt.plot(R,P,zorder=1,color='0.2',lw=1.5)
        plt.scatter(R,P,zorder=2,s=50,color=c)
    
    ax = plt.axes()
    ax.set_xlim(-2.1,2.1)
    #ax.set_ylim(-0.01,0.5)
    plt.savefig('plot2.png')
    
We define a function factory that returns a function which will give the normal distribution for a specified mu and sigma.  We obtain such a function for sigma 0.5, 1, 2, and 3.

It's worth pointing out that in an earlier version of this code I used a list of colors with length 3.  This causes a subtle error:

>>> zip(list(range(3)),'abcde')
[(0, 'a'), (1, 'b'), (2, 'c')]

The longer list's extra values are silently truncated.

.. sourcecode:: python

    > python script.py

.. image:: /figures/plot2.png
   :scale: 50 %
   
**Limits**
   
What else can we do?  We can do some math:

.. sourcecode:: python

    import matplotlib.pyplot as plt
    import numpy as np
    from numpy import sin, cos, pi

    N = pi
    dx = N/50
    h = np.arange(0,pi,dx)
    plt.scatter(h,h,color='b')
    plt.scatter(h,sin(h),color='cyan')
    plt.scatter(h,[1]*len(h),color='red')
    plt.scatter(h,cos(h),color='purple')
    plt.savefig('sin.png')

.. image:: /figures/limits.png
   :scale: 50 %

It doesn't matter how small you shrink N, the answer is still the same.

http://telliott99.blogspot.com/2011/02/know-your-limits.html

**Random walk**

Here is a random walk in one dimension.

.. sourcecode:: python

    import random, sys
    from math import log
    import numpy as np
    import matplotlib.pyplot as plt

    random.seed(157)
    X = range(1000)
    colors = list('bgrcmk')
    for i in range(len(colors)):
        pos = 0
        L = [pos]
        for x in X[1:]:
            pos += random.choice((-1,1))
            L.append(pos)
        plt.scatter(X,L,s=10,color=colors[i])
    
    ax = plt.axes()
    ax.set_xlim(-10,X[-1]+10)
    plt.savefig('plot3.png')

.. sourcecode:: python

    > python script.py

.. image:: /figures/plot3.png
   :scale: 50 %
   
**Birthday Problem**
   
And here is a famous `image <http://en.wikipedia.org/wiki/Solvay_Conference>`_ of the 1911 Solvay Conference, including Marie Curie (elbow on the table), Albert Einstein (2nd from the right) and Max Planck (2nd from the left, standing).  It's a good photo for the `Birthday Problem <http://en.wikipedia.org/wiki/Birthday_problem>`_ because there are 24 people in the picture.

.. image:: /figures/solvay.png
   :scale: 50 %

Everyone knows somebody who has the same birthday as they do. And if not, you can go to 

http://en.wikipedia.org/wiki/October_24#Births

like I did, to find that both Anton van Leeuwenhoek and Kevin Kline were also born on October 24.  If we ignore Feb 29 and assume that births are evenly distributed over the days of the year (which doesn't seem to be true), then the probability that two individuals chosen at random share the same birthday is 1/365.

So the question is, how many people do you have to cram into one room before the probability that there are two people who share a birthday exceeds 0.5?  Actually, it seems that the picture above fits the problem very well.
   
We can solve this in a couple of different ways. 

We may say that we have the probability for each pair that they do not share a birthday, which is 364/365. The probability that *all* the independent combinations do not share a birthday is (364/365)**C(n,2). The probability of the complementary event, that at least one pair does share a birthday, is 1 minus that.

.. image:: /figures/combos.png
   :scale: 50 %

The second approach is to consider the group with 2 people and p = 364/365 that they do not share a birthday. If a new person walks up to the group, there are 363 birthdays which would preserve the "no shared birthday" criterion. The probability of the desired event is then 1 - 364/365 * 363/365..., extended for n-1 steps.

Here we go by method 1:

.. sourcecode:: python

    from math import factorial as f
    import matplotlib.pyplot as plt
    import matplotlib.cm as cm

    def combos(n,k):
        bottom = f(n-k) * f(k)
        return f(n)/bottom

    def p(n):
        prob = 364.0/365
        C = combos(n,2)
        return 1 - prob**C

    N = 50
    L = range(2,N)
    P = [p(n) for n in L]
    cm = plt.get_cmap('gist_rainbow')
    plt.scatter(L,P,c=range(len(L)),
        edgecolor='w',cmap=cm,s=100)
    plt.grid()
    ax = plt.axes()
    ax.set_ylim(-0.1,1.1)
    ax.set_xlim(0,50)
    plt.savefig('birthday.png')

.. image:: /figures/birthday.png
   :scale: 50 %
   
About the rainbow colors and colormaps see :ref:`colors` and

http://matplotlib.sourceforge.net/examples/pylab_examples/show_colormaps.html

The birthday problem is not just a toy example.  I actually ran into this:

http://telliott99.blogspot.com/2010/01/birthday-problem-revisited.html

Here, we construct 5000 examples of a list of the integers in ``range(10)``, that is, 0 to 9.  There are this many possible arrangements:

>>> from math import factorial
>>> factorial(9)
362880

However, look at this:

>>> import random
>>> random.seed(137)
>>> L = range(10)
>>> N = 5000
>>> rL = list()
>>> for i in range(N):
...     random.shuffle(L)
...     rL.append(L[:])
... 
>>> rL = [tuple(e) for e in rL]
>>> len(set(rL))
4997
>>> for i,t in enumerate(rL):
...     if t in rL[:i]:
...         print i,t, rL.index(t)
... 
3354 (9, 3, 1, 0, 6, 2, 5, 4, 8, 7) 290
3807 (6, 4, 1, 5, 2, 0, 8, 7, 9, 3) 3486
4265 (1, 4, 7, 8, 6, 9, 5, 0, 3, 2) 435

Even with > 350,000 possibilities, we're already running into duplicates with only 5000 elements.

**Sampling**

This example is just too much to put in this book

http://telliott99.blogspot.com/2010/10/more-on-sampling-distribution.html

but it's a great graphic, so I'll show it:

.. image:: /figures/sample_distr.png
   :scale: 50 %
   
The figure shows a probability distribution (red), a cumulative distribution for that pdf (blue), and then the code shows how to sample from the distribution (histogram of the samples in purple).

I got the idea from here:

http://videolectures.net/mlss09uk_murray_mcmc/
   
A few more of my favorite examples, posted on the blog:

* `Cycle fun <http://telliott99.blogspot.com/2010/12/cycle-fun.html>`_

* `Taylor series <http://telliott99.blogspot.com/2011/02/plotting-taylor-series-for-sine.html>`_

* `Evolution <http://telliott99.blogspot.com/2010/11/plotting-transition-bias-in-evolution.html>`_


* `Confidence intervals <http://telliott99.blogspot.com/2010/02/confidence-intervals-in-matplotlib.html>`_

* `The Product Rule <http://telliott99.blogspot.com/2010/04/area-under-curve.html>`_